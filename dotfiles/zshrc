# =============
#  ZSH Options
# =============

# Append command to the history file before execution
setopt inc_append_history

# Reload history regularily
setopt share_history

# Include timestamp in history
setopt extended_history

# Ignore duplicate history entries (after another)
setopt hist_ignore_dups

# Do not store the "history" command itself
setopt hist_no_store

# Remove sperfluous blanks from history
setopt hist_reduce_blanks

# Ignore comments on the command line
setopt interactive_comments

# Disable flow control
setopt no_flow_control

# no beep
unsetopt beep

# do not suggest anything when a command is not found
unset command_not_found_handle

# =================
#  Auto completion
# =================
autoload -Uz compinit
compinit

# case insensitive intermittent matching
setopt complete_in_word
setopt always_to_end
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' special-dirs true
# menu on tab with colors
zstyle ':completion:*' menu select
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*:cd:*' tag-order local-directories directory-stack path-directories

_comp_options+=(globdots) # With hidden files

# automatically load bash completion functions
autoload -U +X bashcompinit && bashcompinit

# ==============
#  Key bindings
# ==============
bindkey -e

backward-kill-dir () {
  local WORDCHARS="${WORDCHARS:s#/#}"
  zle backward-delete-word
}
zle -N backward-kill-dir

autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

typeset -A key
key=(
    Home    "$terminfo[khome]"
    End     "$terminfo[kend]"
    Insert  "$terminfo[kich1]"
    Backspace "$terminfo[kbs]"
    Delete  "$terminfo[kdch1]"
    Up      "$terminfo[kcuu1]"
    Down    "$terminfo[kcud1]"
    Left    "$terminfo[kcub1]"
    Right   "$terminfo[kcuf1]"
    PageUp  "$terminfo[kpp]"
    PageDown "$terminfo[knp]"
    CLeft   "$terminfo[kLFT5]"
    CRight  "$terminfo[kRIT5]"
)
[[ -n "$key[Home]"      ]] && bindkey -- "$key[Home]"       beginning-of-line
[[ -n "$key[End]"       ]] && bindkey -- "$key[End]"        end-of-line
[[ -n "$key[PageUp]"    ]] && bindkey -- "$key[PageUp]"     beginning-of-history
[[ -n "$key[PageDown]"  ]] && bindkey -- "$key[PageDown]"   end-of-history
[[ -n "$key[Delete]"    ]] && bindkey -- "$key[Delete]"     delete-char
[[ -n "$key[CLeft]"     ]] && bindkey -- "$key[CLeft]"      backward-word
[[ -n "$key[CRight]"    ]] && bindkey -- "$key[CRight]"     forward-word
[[ -n "$key[Up]"        ]] && bindkey -- "$key[Up]"         up-line-or-beginning-search
[[ -n "$key[Down]"      ]] && bindkey -- "$key[Down]"       down-line-or-beginning-search

# alternatives for wonky terminals (find out with 'showkey -a')

bindkey -- "^[[H"       beginning-of-line
bindkey -- "^[[1~"      beginning-of-line
bindkey -- "^[[F"       end-of-line
bindkey -- "^[[4"       end-of-line
bindkey -- "^[[1;5D"    backward-word
bindkey -- "^[[1;5C"    forward-word
bindkey -- "^[[3;5~"    delete-word
bindkey -- "^H"         backward-kill-dir # ctrl + backspace
bindkey -- "^[^H"       backward-kill-dir # alt + backspace
bindkey -- "^R"         history-incremental-search-backward
bindkey -- "^[[A"       up-line-or-beginning-search
bindkey -- "^[[B"       down-line-or-beginning-search

# =======
#  Misc.
# =======

# Automatically set terminal title
case $TERM in
  xterm*)
    precmd () {
      if [[ -z $SSH_CONNECTION ]]; then
        print -Pn "\e]0;$0 (%~)\a"
      else
        print -Pn "\e]0;%n@%m $0 (%~)\a"
      fi
    }
    preexec () {
      if [[ -z $SSH_CONNECTION ]]; then
        print -Pn "\e]0;$1 (%c)\a"
      else
        print -Pn "\e]0;%n@%m $1 (%c)\a"
      fi
    }
    ;;
esac

# Load direnv hook
if type "direnv" > /dev/null; then
  eval "$(direnv hook zsh)"
fi

# Load iTerm hook
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# =============
#  Environment
# =============
export LESS_TERMCAP_mb=$'\E[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\E[1;36m'     # begin blink
export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\E[01;44;33m' # begin reverse video
export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\E[0m'        # reset underline

# Preferred editor for local and remote sessions
export VISUAL='code'
export EDITOR='vim'
export SUDO_EDITOR=$EDITOR
export PAGER='less'

# History
export HISTFILE=$HOME/.zsh_history
export HISTSIZE=10000000
export HISTFILESIZE=1000000
export SAVEHIST=1000000

# Nice colors for jq
export JQ_COLORS="1;31:1;31:1;31:1;31:1;32:1;37:1;37"

# Language
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# =======================
#  Aliases and functions
# =======================

if type "nvim" > /dev/null; then
  alias vim="nvim"
fi

alias vi='vim'
alias view="vim -R"
alias vimdiff="vim -d"

alias cp="cp -v"
alias mv="mv -v"
alias ln="ln -v"
alias rm="rm -v"
alias chmod="chmod -c"
alias chown="chown -c"
alias mkdir="mkdir -v"
alias rmdir="rmdir -v"

if [[ "$(uname -s)" == "Darwin" ]]; then
  alias ls="ls -G"
else
  alias ls="ls --color=auto"
  alias pbcopy="xsel --clipboard --input"
  alias pbpaste="xsel --clipboard --output"
fi

alias ll="ls -alhF"

function mkcd () {
  if (( ARGC != 1 )); then
    printf 'usage: mkcd <new-directory>\n'
    return 1;
  fi
  if [[ ! -d "$1" ]]; then
    command mkdir -p "$1"
  else
    printf '`%s'\'' already exists: cd-ing.\n' "$1"
  fi
  builtin cd "$1"
}

function mktmp() {
	if [ -z "$1" ]
	then
		cd $(mktemp -d)
	else
		mkdir -p /tmp/$1 && cd /tmp/$1
	fi
}

function pyprint() {
  local ARGS="$@"
  python -c "import math; import numpy as np; import os; import sys; print($ARGS)"
}

# ========
#  Prompt
# ========

# VCS plugin (https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Version-Control-Information)
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' unstagedstr '✗'
zstyle ':vcs_info:*' stagedstr '✔'
zstyle ':vcs_info:*' formats ' %B%F{blue}(%b)%c%u%f%%b'
zstyle ':vcs_info:*' actionformats ' %B%F{blue}(%b|%a)%c%u%f%%b'

setopt prompt_subst # promp subsitution for interactive prompts

# Primary prompt
if [[ -z $SSH_CONNECTION ]]; then
  PROMPT='%B%(!.%F{red}.%F{green})%~${vcs_info_msg_0_}%f%b '
else
  # include username for SSH sessions
  PROMPT='%F{yellow}%n@%m%f %F{red}%B%~%b%f %# ${vcs_info_msg_0_}'
fi

# Secondary prompt
PS2='%F{red}\%f '
# Selection prompt used within a select loop.
PS3='?# '
# Execution trace prompt (setopt xtrace). default: '+%N:%i>'
PS4='+%N:%i:%_> '

# =========
#  Plugins
# =========

_load_plugin_if_available() {
  plugin="$HOME/.zsh/$1/$1.plugin.zsh"
  if [ -f "${plugin}" ]; then
    source "${plugin}"
  fi
}

_load_plugin_if_available zsh-syntax-highlighting
_load_plugin_if_available zsh-autosuggestions
